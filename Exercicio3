import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Aviao {
    private String nome;
    private int identificador;

    public Aviao(String nome, int identificador) {
        this.nome = nome;
        this.identificador = identificador;
    }

    public String getNome() {
        return nome;
    }

    public int getIdentificador() {
        return identificador;
    }
}

public class Exercicio3 {
    public static void main(String[] args) {
        Queue<Aviao> filaDecolagem = new LinkedList<>();
        Scanner scanner = new Scanner(System.in);
        int opcao;

        do {
            System.out.println("----- Controle de Pista de Decolagem -----");
            System.out.println("1. Listar o número de aviões aguardando na fila de decolagem");
            System.out.println("2. Autorizar a decolagem do primeiro avião da fila");
            System.out.println("3. Adicionar um avião à fila de espera");
            System.out.println("4. Listar todos os aviões na fila de espera");
            System.out.println("5. Listar as características do primeiro avião da fila");
            System.out.println("0. Sair");
            System.out.print("Escolha uma opção: ");
            opcao = scanner.nextInt();

            switch (opcao) {
                case 1:
                    System.out.println("Número de aviões aguardando na fila de decolagem: " + filaDecolagem.size());
                    break;
                case 2:
                    if (!filaDecolagem.isEmpty()) {
                        Aviao aviaoDecolagem = filaDecolagem.poll();
                        System.out.println("Autorizando decolagem do avião " + aviaoDecolagem.getNome() + " (ID: " + aviaoDecolagem.getIdentificador() + ")");
                    } else {
                        System.out.println("Não há aviões na fila de decolagem.");
                    }
                    break;
                case 3:
                    System.out.print("Digite o nome do avião: ");
                    String nome = scanner.next();
                    System.out.print("Digite o identificador do avião: ");
                    int identificador = scanner.nextInt();
                    Aviao novoAviao = new Aviao(nome, identificador);
                    filaDecolagem.offer(novoAviao);
                    System.out.println("Avião " + nome + " (ID: " + identificador + ") adicionado à fila de espera.");
                    break;
                case 4:
                    System.out.println("Aviões na fila de espera:");
                    for (Aviao aviao : filaDecolagem) {
                        System.out.println("Nome: " + aviao.getNome() + " (ID: " + aviao.getIdentificador() + ")");
                    }
                    break;
                case 5:
                    if (!filaDecolagem.isEmpty()) {
                        Aviao primeiroAviao = filaDecolagem.peek();
                        System.out.println("Características do primeiro avião na fila:");
                        System.out.println("Nome: " + primeiroAviao.getNome() + " (ID: " + primeiroAviao.getIdentificador() + ")");
                    } else {
                        System.out.println("Não há aviões na fila de espera.");
                    }
                    break;
                case 0:
                    System.out.println("Saindo do programa...");
                    break;
                default:
                    System.out.println("Opção inválida. Digite um número válido.");
            }

            System.out.println();
        } while (opcao != 0);
    }
}
